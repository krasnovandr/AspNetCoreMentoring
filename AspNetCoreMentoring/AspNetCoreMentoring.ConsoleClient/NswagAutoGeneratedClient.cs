using System;
using System.Collections.Generic;
using System.Text;

namespace AspNetCoreMentoring.ConsoleClient
{
    //----------------------
    // <auto-generated>
    //     Generated using the NSwag toolchain v11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0)) (http://NSwag.org)
    // </auto-generated>
    //----------------------

    namespace MyNamespace
    {
#pragma warning disable // Disable all warnings

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
        public partial class Client
        {
            private string _baseUrl = "";
            private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;

            public Client(string baseUrl)
            {
                BaseUrl = baseUrl;
                _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() =>
                {
                    var settings = new Newtonsoft.Json.JsonSerializerSettings();
                    UpdateJsonSerializerSettings(settings);
                    return settings;
                });
            }

            public string BaseUrl
            {
                get { return _baseUrl; }
                set { _baseUrl = value; }
            }

            protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }

            partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
            partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
            partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            public System.Threading.Tasks.Task UploadCategoryImageAsync(int? categoryId, FileParameter categoryImageFormData)
            {
                return UploadCategoryImageAsync(categoryId, categoryImageFormData, System.Threading.CancellationToken.None);
            }

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            public async System.Threading.Tasks.Task UploadCategoryImageAsync(int? categoryId, FileParameter categoryImageFormData, System.Threading.CancellationToken cancellationToken)
            {
                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/categories/Image");

                var client_ = new System.Net.Http.HttpClient();
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var boundary_ = System.Guid.NewGuid().ToString();
                        var content_ = new System.Net.Http.MultipartFormDataContent(boundary_);
                        content_.Headers.Remove("Content-Type");
                        content_.Headers.TryAddWithoutValidation("Content-Type", "multipart/form-data; boundary=" + boundary_);
                        if (categoryId != null)
                            content_.Add(new System.Net.Http.StringContent(ConvertToString(categoryId, System.Globalization.CultureInfo.InvariantCulture)), "CategoryId");
                        if (categoryImageFormData != null)
                            content_.Add(new System.Net.Http.StreamContent(categoryImageFormData.Data), "CategoryImage", categoryImageFormData.FileName ?? "CategoryImage");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");

                        PrepareRequest(client_, request_, urlBuilder_);
                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        try
                        {
                            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = ((int)response_.StatusCode).ToString();
                            if (status_ == "200")
                            {
                                return;
                            }
                            else
                            if (status_ != "200" && status_ != "204")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (response_ != null)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (client_ != null)
                        client_.Dispose();
                }
            }

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            public System.Threading.Tasks.Task GetContentAsync(int id)
            {
                return GetContentAsync(id, System.Threading.CancellationToken.None);
            }

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            public async System.Threading.Tasks.Task GetContentAsync(int id, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/categories/Image/{id}");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                var client_ = new System.Net.Http.HttpClient();
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");

                        PrepareRequest(client_, request_, urlBuilder_);
                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        try
                        {
                            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = ((int)response_.StatusCode).ToString();
                            if (status_ == "200")
                            {
                                return;
                            }
                            else
                            if (status_ != "200" && status_ != "204")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (response_ != null)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (client_ != null)
                        client_.Dispose();
                }
            }

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ProductReadListDto>> GetAllAsync(int? pageNumber, int? itemsPerPage)
            {
                return GetAllAsync(pageNumber, itemsPerPage, System.Threading.CancellationToken.None);
            }

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            public async System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<ProductReadListDto>> GetAllAsync(int? pageNumber, int? itemsPerPage, System.Threading.CancellationToken cancellationToken)
            {
                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/products?");
                if (pageNumber != null)
                {
                    urlBuilder_.Append("pageNumber=").Append(System.Uri.EscapeDataString(ConvertToString(pageNumber, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                if (itemsPerPage != null)
                {
                    urlBuilder_.Append("itemsPerPage=").Append(System.Uri.EscapeDataString(ConvertToString(itemsPerPage, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
                }
                urlBuilder_.Length--;

                var client_ = new System.Net.Http.HttpClient();
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                        PrepareRequest(client_, request_, urlBuilder_);
                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        try
                        {
                            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = ((int)response_.StatusCode).ToString();
                            if (status_ == "200")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                var result_ = default(System.Collections.ObjectModel.ObservableCollection<ProductReadListDto>);
                                try
                                {
                                    result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<System.Collections.ObjectModel.ObservableCollection<ProductReadListDto>>(responseData_, _settings.Value);
                                    return result_;
                                }
                                catch (System.Exception exception_)
                                {
                                    throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                                }
                            }
                            else
                            if (status_ != "200" && status_ != "204")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                            }

                            return default(System.Collections.ObjectModel.ObservableCollection<ProductReadListDto>);
                        }
                        finally
                        {
                            if (response_ != null)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (client_ != null)
                        client_.Dispose();
                }
            }

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            public System.Threading.Tasks.Task<ProductCreateItemDto> PostAsync(ProductWriteItemDto createModel)
            {
                return PostAsync(createModel, System.Threading.CancellationToken.None);
            }

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            public async System.Threading.Tasks.Task<ProductCreateItemDto> PostAsync(ProductWriteItemDto createModel, System.Threading.CancellationToken cancellationToken)
            {
                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/products");

                var client_ = new System.Net.Http.HttpClient();
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(createModel, _settings.Value));
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("POST");
                        request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                        PrepareRequest(client_, request_, urlBuilder_);
                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        try
                        {
                            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = ((int)response_.StatusCode).ToString();
                            if (status_ == "400")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new SwaggerException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                            }
                            else
                            if (status_ == "201")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                var result_ = default(ProductCreateItemDto);
                                try
                                {
                                    result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProductCreateItemDto>(responseData_, _settings.Value);
                                    return result_;
                                }
                                catch (System.Exception exception_)
                                {
                                    throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                                }
                            }
                            else
                            if (status_ != "200" && status_ != "204")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                            }

                            return default(ProductCreateItemDto);
                        }
                        finally
                        {
                            if (response_ != null)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (client_ != null)
                        client_.Dispose();
                }
            }

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            public System.Threading.Tasks.Task<ProductWriteItemDto> GetAsync(int id)
            {
                return GetAsync(id, System.Threading.CancellationToken.None);
            }

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            public async System.Threading.Tasks.Task<ProductWriteItemDto> GetAsync(int id, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/products/{id}");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                var client_ = new System.Net.Http.HttpClient();
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("GET");
                        request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                        PrepareRequest(client_, request_, urlBuilder_);
                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        try
                        {
                            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = ((int)response_.StatusCode).ToString();
                            if (status_ == "404")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new SwaggerException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                            }
                            else
                            if (status_ == "200")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                var result_ = default(ProductWriteItemDto);
                                try
                                {
                                    result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProductWriteItemDto>(responseData_, _settings.Value);
                                    return result_;
                                }
                                catch (System.Exception exception_)
                                {
                                    throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                                }
                            }
                            else
                            if (status_ != "200" && status_ != "204")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                            }

                            return default(ProductWriteItemDto);
                        }
                        finally
                        {
                            if (response_ != null)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (client_ != null)
                        client_.Dispose();
                }
            }

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            public System.Threading.Tasks.Task<ProductCreateItemDto> PutAsync(int id, ProductWriteItemDto updateModel)
            {
                return PutAsync(id, updateModel, System.Threading.CancellationToken.None);
            }

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            public async System.Threading.Tasks.Task<ProductCreateItemDto> PutAsync(int id, ProductWriteItemDto updateModel, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/products/{id}");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                var client_ = new System.Net.Http.HttpClient();
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(updateModel, _settings.Value));
                        content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                        request_.Content = content_;
                        request_.Method = new System.Net.Http.HttpMethod("PUT");
                        request_.Headers.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));

                        PrepareRequest(client_, request_, urlBuilder_);
                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        try
                        {
                            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = ((int)response_.StatusCode).ToString();
                            if (status_ == "400")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new SwaggerException("Bad Request", (int)response_.StatusCode, responseData_, headers_, null);
                            }
                            else
                            if (status_ == "201")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                var result_ = default(ProductCreateItemDto);
                                try
                                {
                                    result_ = Newtonsoft.Json.JsonConvert.DeserializeObject<ProductCreateItemDto>(responseData_, _settings.Value);
                                    return result_;
                                }
                                catch (System.Exception exception_)
                                {
                                    throw new SwaggerException("Could not deserialize the response body.", (int)response_.StatusCode, responseData_, headers_, exception_);
                                }
                            }
                            else
                            if (status_ != "200" && status_ != "204")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                            }

                            return default(ProductCreateItemDto);
                        }
                        finally
                        {
                            if (response_ != null)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (client_ != null)
                        client_.Dispose();
                }
            }

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            public System.Threading.Tasks.Task DeleteAsync(int id)
            {
                return DeleteAsync(id, System.Threading.CancellationToken.None);
            }

            /// <returns>Success</returns>
            /// <exception cref="SwaggerException">A server side error occurred.</exception>
            /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
            public async System.Threading.Tasks.Task DeleteAsync(int id, System.Threading.CancellationToken cancellationToken)
            {
                if (id == null)
                    throw new System.ArgumentNullException("id");

                var urlBuilder_ = new System.Text.StringBuilder();
                urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/api/products/{id}");
                urlBuilder_.Replace("{id}", System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture)));

                var client_ = new System.Net.Http.HttpClient();
                try
                {
                    using (var request_ = new System.Net.Http.HttpRequestMessage())
                    {
                        request_.Method = new System.Net.Http.HttpMethod("DELETE");

                        PrepareRequest(client_, request_, urlBuilder_);
                        var url_ = urlBuilder_.ToString();
                        request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                        PrepareRequest(client_, request_, url_);

                        var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                        try
                        {
                            var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                            if (response_.Content != null && response_.Content.Headers != null)
                            {
                                foreach (var item_ in response_.Content.Headers)
                                    headers_[item_.Key] = item_.Value;
                            }

                            ProcessResponse(client_, response_);

                            var status_ = ((int)response_.StatusCode).ToString();
                            if (status_ == "404")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new SwaggerException("Not Found", (int)response_.StatusCode, responseData_, headers_, null);
                            }
                            else
                            if (status_ == "204")
                            {
                                return;
                            }
                            else
                            if (status_ != "200" && status_ != "204")
                            {
                                var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                                throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                            }
                        }
                        finally
                        {
                            if (response_ != null)
                                response_.Dispose();
                        }
                    }
                }
                finally
                {
                    if (client_ != null)
                        client_.Dispose();
                }
            }

            private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
            {
                if (value is System.Enum)
                {
                    string name = System.Enum.GetName(value.GetType(), value);
                    if (name != null)
                    {
                        var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                        if (field != null)
                        {
                            var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute))
                                as System.Runtime.Serialization.EnumMemberAttribute;
                            if (attribute != null)
                            {
                                return attribute.Value;
                            }
                        }
                    }
                }
                else if (value is byte[])
                {
                    return System.Convert.ToBase64String((byte[])value);
                }
                else if (value != null && value.GetType().IsArray)
                {
                    var array = System.Linq.Enumerable.OfType<object>((System.Array)value);
                    return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
                }

                return System.Convert.ToString(value, cultureInfo);
            }
        }



        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class ProductReadListDto : System.ComponentModel.INotifyPropertyChanged
        {
            private int? _productId;
            private string _productName;
            private string _quantityPerUnit;
            private double? _unitPrice;
            private int? _unitsInStock;
            private int? _unitsOnOrder;
            private int? _reorderLevel;
            private bool? _discontinued;
            private string _categoryName;
            private string _supplierName;

            [Newtonsoft.Json.JsonProperty("productId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? ProductId
            {
                get { return _productId; }
                set
                {
                    if (_productId != value)
                    {
                        _productId = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string ProductName
            {
                get { return _productName; }
                set
                {
                    if (_productName != value)
                    {
                        _productName = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("quantityPerUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string QuantityPerUnit
            {
                get { return _quantityPerUnit; }
                set
                {
                    if (_quantityPerUnit != value)
                    {
                        _quantityPerUnit = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? UnitPrice
            {
                get { return _unitPrice; }
                set
                {
                    if (_unitPrice != value)
                    {
                        _unitPrice = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("unitsInStock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? UnitsInStock
            {
                get { return _unitsInStock; }
                set
                {
                    if (_unitsInStock != value)
                    {
                        _unitsInStock = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("unitsOnOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? UnitsOnOrder
            {
                get { return _unitsOnOrder; }
                set
                {
                    if (_unitsOnOrder != value)
                    {
                        _unitsOnOrder = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("reorderLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? ReorderLevel
            {
                get { return _reorderLevel; }
                set
                {
                    if (_reorderLevel != value)
                    {
                        _reorderLevel = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("discontinued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? Discontinued
            {
                get { return _discontinued; }
                set
                {
                    if (_discontinued != value)
                    {
                        _discontinued = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("categoryName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string CategoryName
            {
                get { return _categoryName; }
                set
                {
                    if (_categoryName != value)
                    {
                        _categoryName = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("supplierName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string SupplierName
            {
                get { return _supplierName; }
                set
                {
                    if (_supplierName != value)
                    {
                        _supplierName = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static ProductReadListDto FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductReadListDto>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class ProductWriteItemDto : System.ComponentModel.INotifyPropertyChanged
        {
            private string _productName;
            private string _quantityPerUnit;
            private double? _unitPrice;
            private int? _unitsInStock;
            private int? _unitsOnOrder;
            private int? _reorderLevel;
            private bool? _discontinued;
            private int _selectedCategoryId;
            private int _selectedSupplierId;

            [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
            public string ProductName
            {
                get { return _productName; }
                set
                {
                    if (_productName != value)
                    {
                        _productName = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("quantityPerUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string QuantityPerUnit
            {
                get { return _quantityPerUnit; }
                set
                {
                    if (_quantityPerUnit != value)
                    {
                        _quantityPerUnit = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? UnitPrice
            {
                get { return _unitPrice; }
                set
                {
                    if (_unitPrice != value)
                    {
                        _unitPrice = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("unitsInStock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? UnitsInStock
            {
                get { return _unitsInStock; }
                set
                {
                    if (_unitsInStock != value)
                    {
                        _unitsInStock = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("unitsOnOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? UnitsOnOrder
            {
                get { return _unitsOnOrder; }
                set
                {
                    if (_unitsOnOrder != value)
                    {
                        _unitsOnOrder = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("reorderLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? ReorderLevel
            {
                get { return _reorderLevel; }
                set
                {
                    if (_reorderLevel != value)
                    {
                        _reorderLevel = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("discontinued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? Discontinued
            {
                get { return _discontinued; }
                set
                {
                    if (_discontinued != value)
                    {
                        _discontinued = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("selectedCategoryId", Required = Newtonsoft.Json.Required.Always)]
            public int SelectedCategoryId
            {
                get { return _selectedCategoryId; }
                set
                {
                    if (_selectedCategoryId != value)
                    {
                        _selectedCategoryId = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("selectedSupplierId", Required = Newtonsoft.Json.Required.Always)]
            public int SelectedSupplierId
            {
                get { return _selectedSupplierId; }
                set
                {
                    if (_selectedSupplierId != value)
                    {
                        _selectedSupplierId = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static ProductWriteItemDto FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductWriteItemDto>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "9.11.0.0 (Newtonsoft.Json v9.0.0.0)")]
        public partial class ProductCreateItemDto : System.ComponentModel.INotifyPropertyChanged
        {
            private int? _productId;
            private string _productName;
            private string _quantityPerUnit;
            private double? _unitPrice;
            private int? _unitsInStock;
            private int? _unitsOnOrder;
            private int? _reorderLevel;
            private bool? _discontinued;
            private int _selectedCategoryId;
            private int _selectedSupplierId;

            [Newtonsoft.Json.JsonProperty("productId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? ProductId
            {
                get { return _productId; }
                set
                {
                    if (_productId != value)
                    {
                        _productId = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("productName", Required = Newtonsoft.Json.Required.Always)]
            [System.ComponentModel.DataAnnotations.Required]
            [System.ComponentModel.DataAnnotations.StringLength(100, MinimumLength = 3)]
            public string ProductName
            {
                get { return _productName; }
                set
                {
                    if (_productName != value)
                    {
                        _productName = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("quantityPerUnit", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public string QuantityPerUnit
            {
                get { return _quantityPerUnit; }
                set
                {
                    if (_quantityPerUnit != value)
                    {
                        _quantityPerUnit = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("unitPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public double? UnitPrice
            {
                get { return _unitPrice; }
                set
                {
                    if (_unitPrice != value)
                    {
                        _unitPrice = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("unitsInStock", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? UnitsInStock
            {
                get { return _unitsInStock; }
                set
                {
                    if (_unitsInStock != value)
                    {
                        _unitsInStock = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("unitsOnOrder", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? UnitsOnOrder
            {
                get { return _unitsOnOrder; }
                set
                {
                    if (_unitsOnOrder != value)
                    {
                        _unitsOnOrder = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("reorderLevel", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public int? ReorderLevel
            {
                get { return _reorderLevel; }
                set
                {
                    if (_reorderLevel != value)
                    {
                        _reorderLevel = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("discontinued", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
            public bool? Discontinued
            {
                get { return _discontinued; }
                set
                {
                    if (_discontinued != value)
                    {
                        _discontinued = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("selectedCategoryId", Required = Newtonsoft.Json.Required.Always)]
            public int SelectedCategoryId
            {
                get { return _selectedCategoryId; }
                set
                {
                    if (_selectedCategoryId != value)
                    {
                        _selectedCategoryId = value;
                        RaisePropertyChanged();
                    }
                }
            }

            [Newtonsoft.Json.JsonProperty("selectedSupplierId", Required = Newtonsoft.Json.Required.Always)]
            public int SelectedSupplierId
            {
                get { return _selectedSupplierId; }
                set
                {
                    if (_selectedSupplierId != value)
                    {
                        _selectedSupplierId = value;
                        RaisePropertyChanged();
                    }
                }
            }

            public string ToJson()
            {
                return Newtonsoft.Json.JsonConvert.SerializeObject(this);
            }

            public static ProductCreateItemDto FromJson(string data)
            {
                return Newtonsoft.Json.JsonConvert.DeserializeObject<ProductCreateItemDto>(data);
            }

            public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

            protected virtual void RaisePropertyChanged([System.Runtime.CompilerServices.CallerMemberName] string propertyName = null)
            {
                var handler = PropertyChanged;
                if (handler != null)
                    handler(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }

        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
        public partial class FileParameter
        {
            public FileParameter(System.IO.Stream data)
                : this(data, null)
            {
            }

            public FileParameter(System.IO.Stream data, string fileName)
            {
                Data = data;
                FileName = fileName;
            }

            public System.IO.Stream Data { get; private set; }

            public string FileName { get; private set; }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
        public partial class SwaggerException : System.Exception
        {
            public int StatusCode { get; private set; }

            public string Response { get; private set; }

            public System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

            public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException)
                : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
            {
                StatusCode = statusCode;
                Response = response;
                Headers = headers;
            }

            public override string ToString()
            {
                return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
            }
        }

        [System.CodeDom.Compiler.GeneratedCode("NSwag", "11.20.1.0 (NJsonSchema v9.11.0.0 (Newtonsoft.Json v9.0.0.0))")]
        public partial class SwaggerException<TResult> : SwaggerException
        {
            public TResult Result { get; private set; }

            public SwaggerException(string message, int statusCode, string response, System.Collections.Generic.Dictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException)
                : base(message, statusCode, response, headers, innerException)
            {
                Result = result;
            }
        }

    }
}
